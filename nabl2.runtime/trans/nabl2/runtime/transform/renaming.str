module renaming

imports 
  signatures/-
  nabl2/api
  libspoofax/stratego/debug
  libspoofax/ui/dialogs
  signatures/nabl2/shared/common/-
  signatures/nabl2/runtime/common/-

rules
  rename-action(construct-textual-change|) :
    (selected-term, _, ast, path, project-path) -> (path, result)
    where
      analysis := <nabl2-get-ast-analysis> ast;
      <not(nabl2-analysis-has-errors)> analysis
    with
      new-name := <read-new-name> path
      ; {| ErrorMessage: renamed-ast := <rename(|selected-term, new-name, path) <+ show-errors; !ast> ast |}
      ; (_, _, result) := <construct-textual-change> (ast, renamed-ast)

  rename(|selected-term, new-name, path): ast -> renamed-ast
    where
      analysis := <nabl2-get-ast-analysis> ast
      ; res-rel := <calc-resolution-relation> analysis
      ; selected-index := <find-name-index(|ast, res-rel)> selected-term
      ; target-indices := <find-all-related-occs> (selected-index, res-rel)
      ; renamed-ast := <rename-ast(|target-indices, new-name)> ast
      ; check-capture(|renamed-ast, res-rel, path)

rules // Step 1: Calculate resolution relation
  calc-resolution-relation: analysis -> user-defined-relation
    where
      refs  := <nabl2-get-all-refs(|analysis)>
      ; decs := <nabl2-get-all-decls(|analysis)>
      ; ref-dec-pairs := <map(make-resolution-pair(|analysis))> refs
      ; decs-reflexive-pairs := <map(make-reflexive-pair)> decs
      ; relation := <conc;make-set> (decs-reflexive-pairs, ref-dec-pairs)
      ; user-defined-relation := <filter(is-user-defined)> relation
      
  make-resolution-pair(|analysis) : ref -> (ref-index, dec-index)
    where
      (dec, _) := <nabl2-get-resolved-name(|analysis)> ref
      ; ref-index := <get-term-index-from-occ> ref
      ; dec-index := <get-term-index-from-occ> dec         

  make-reflexive-pair: dec -> (term-index, term-index)
    where
      term-index := <get-term-index-from-occ> dec

  is-user-defined: (ref, dec@TermIndex(path, num-index)) -> <id>
    where
      <not(eq)> (num-index, 0)

  get-term-index-from-occ: Occurrence(_, name, term-index) -> term-index
  
rules // Step 2: Find name index in selection
  find-name-index(|ast, res-rel): term -> occ-index
    where
      <check-selection(|term, ast)> ast
      ; occ-index := <collect-one(get-name-index(|res-rel))> term  
        <+ add-error(|"Renaming impossible", "The selected term cannot be renamed."); fail

  check-selection(|selected-term, ast) =
    <not(eq)> (selected-term, ast)
  	<+ add-error(|"Invalid selection", "Please select a name"); fail

  get-name-index(|res-rel): term -> occurrence
    where
      if (<is-list> term) then
        <map(get-name-index(|res-rel))> term
      else
        <is-string> term
        ; term-index := <nabl2-get-ast-index> term
        ; occurrence := <fetch-elem(res-pair-contains(|term-index))> res-rel
      end	
			
  res-pair-contains(|term-index): (ref-index, dec-index) -> term-index 
    where
      <eq> (term-index, ref-index) <+ <eq> (term-index, dec-index) 


rules //Step 4: Change name terms

  rename-ast(|target-indices, new-name): ast -> renamed-ast
    where
      renamed-ast := <bottomup(try(rename-term(|target-indices, new-name)))> ast

  rename-term(|target-indices, new-name): t -> new-name
    where
      <is-string> t
      ; term-index := <nabl2-get-ast-index> t
      ; <elem> (term-index, target-indices)

rules //Step 5: Checking for capture

  check-capture(|renamed-ast, res-rel, path) =
    (_, new-analysis, _, _, _) := <nabl2-analyze-ast(|path)> renamed-ast
    ; new-res-rel := <calc-resolution-relation; qsort(res-pair-gt)> new-analysis
    ; old-res-rel := <qsort(res-pair-gt)> res-rel
    ; <eq>(old-res-rel, new-res-rel) 
      <+ add-error(|"Capture detected", "This renaming leads to name capture"); fail

  res-pair-gt: ((ref-1, dec-1), (ref-2, dec-2)) -> <id>
    where
      <term-index-gt> (ref-1, ref-2)
      ; <term-index-gt> (dec-1, dec-2)

  term-index-gt: (TermIndex(path-1, num-index-1), TermIndex(path-2, num-index-2)) -> <id>
    where 
      <gt> (num-index-1, num-index-2)
      ; <string-gt> (path-1, path-2)

rules // UI strategies

  read-new-name: _ -> new-name
    where 	
      new-name := <show-input-dialog(|"Rename", "")> "Enter a new name"

  check-selection(|selected-term, ast) =
    <eq> (selected-term, ast) 
    <+ add-error(|"Invalid selection", "Please select a name"); fail 
    
rules // error handling strategies 
  add-error(|title, message) =
    rules(
      ErrorMessage :+ () -> (title, message)
    )
      
  show-errors =    
    [(title, message) | _] := <bagof-ErrorMessage> ()
    ; <show-dialog(|title, "ERROR")> message    

rules // primitives
  find-all-related-occs =  prim("FindAllRelatedOccurrences")
